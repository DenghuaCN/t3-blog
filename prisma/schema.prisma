// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[] // 可通过Twitter,Google等其他平台登陆，一个用户可以拥有多个账户
  sessions      Session[]
  //
  posts         Post[]      // 一个用户可以有多个Post 1 对 多
  comment       Comment[]   // 一个用户可以有多个comment 1 对 多
  likes         Like[]      // 一个用户可以有多个like 1 对 多
  bookmarks     Bookmark[]  // 一个用户可以有多个书签 1 对 多
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Blog Table/Models
model Post {
  id            String  @id @default(cuid())
  title         String  @unique // 唯一标识符，title不能冲突，且需要作为slug
  description   String
  slug          String
  featuredImage String? // 图片可为空

  html          String @db.Text
  text          String @db.Text

  authorId      String
  author        User   @relation(fields: [authorId], references: [id]) // Post始终有一个作者

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tags          Tag[]       // Post表 多对多 Tag表  多 对 多
  comments      Comment[]   // 一个post可以有多个comment 1 对 多
  likes         Like[]      // 一个post可以有多个like 1 对 多
  bookmarks     Bookmark[]  // 一个post可以被多个用户添加书签 1 对 多
}

// 标签
model Tag {
  id          String  @id @default(cuid())
  name        String
  description String?
  slug        String

  posts       Post[]      // Tag表 多对多 Post表
}

// 评论
model Comment {
  id          String @id @default(cuid())
  text        String

  userId      String
  user        User @relation(fields: [userId], references: [id]) // 一个comment始终有一个user

  postId      String
  post        Post @relation(fields: [postId], references: [id]) // 一个comment始终有一个post

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// 点赞
model Like {
  id          String @id @default(cuid())

  userId      String
  user        User @relation(fields: [userId], references: [id]) // 一个like始终有一个user

  postId      String
  post        Post @relation(fields: [postId], references: [id]) // 一个like始终有一个post

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, postId]) // 索引
}

// 书签
model Bookmark {
  id          String @id @default(cuid())

  userId      String
  user        User @relation(fields: [userId], references: [id]) // 一个bookmark始终有一个user

  postId      String
  post        Post @relation(fields: [postId], references: [id]) // 一个bookmark始终有一个post

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, postId]) // 索引
}
